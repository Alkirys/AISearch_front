// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package find

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FindClient is the client API for Find service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FindClient interface {
	FindHandler(ctx context.Context, in *FindHandlerRequest, opts ...grpc.CallOption) (*FindHandlerResponse, error)
	DetectHandler(ctx context.Context, in *DetectHandlerRequest, opts ...grpc.CallOption) (*DetectHandlerResponse, error)
}

type findClient struct {
	cc grpc.ClientConnInterface
}

func NewFindClient(cc grpc.ClientConnInterface) FindClient {
	return &findClient{cc}
}

func (c *findClient) FindHandler(ctx context.Context, in *FindHandlerRequest, opts ...grpc.CallOption) (*FindHandlerResponse, error) {
	out := new(FindHandlerResponse)
	err := c.cc.Invoke(ctx, "/find.Find/FindHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *findClient) DetectHandler(ctx context.Context, in *DetectHandlerRequest, opts ...grpc.CallOption) (*DetectHandlerResponse, error) {
	out := new(DetectHandlerResponse)
	err := c.cc.Invoke(ctx, "/find.Find/DetectHandler", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FindServer is the server API for Find service.
// All implementations must embed UnimplementedFindServer
// for forward compatibility
type FindServer interface {
	FindHandler(context.Context, *FindHandlerRequest) (*FindHandlerResponse, error)
	DetectHandler(context.Context, *DetectHandlerRequest) (*DetectHandlerResponse, error)
	mustEmbedUnimplementedFindServer()
}

// UnimplementedFindServer must be embedded to have forward compatible implementations.
type UnimplementedFindServer struct {
}

func (UnimplementedFindServer) FindHandler(context.Context, *FindHandlerRequest) (*FindHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindHandler not implemented")
}
func (UnimplementedFindServer) DetectHandler(context.Context, *DetectHandlerRequest) (*DetectHandlerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetectHandler not implemented")
}
func (UnimplementedFindServer) mustEmbedUnimplementedFindServer() {}

// UnsafeFindServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FindServer will
// result in compilation errors.
type UnsafeFindServer interface {
	mustEmbedUnimplementedFindServer()
}

func RegisterFindServer(s grpc.ServiceRegistrar, srv FindServer) {
	s.RegisterService(&Find_ServiceDesc, srv)
}

func _Find_FindHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FindServer).FindHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/find.Find/FindHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FindServer).FindHandler(ctx, req.(*FindHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Find_DetectHandler_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetectHandlerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FindServer).DetectHandler(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/find.Find/DetectHandler",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FindServer).DetectHandler(ctx, req.(*DetectHandlerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Find_ServiceDesc is the grpc.ServiceDesc for Find service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Find_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "find.Find",
	HandlerType: (*FindServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindHandler",
			Handler:    _Find_FindHandler_Handler,
		},
		{
			MethodName: "DetectHandler",
			Handler:    _Find_DetectHandler_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/find/find.proto",
}
